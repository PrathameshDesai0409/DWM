import numpy as np
import random

# Function to calculate the Euclidean distance between two points
def euclidean_distance(a, b):
    return np.sqrt(np.sum((a - b) ** 2))

# Function to calculate the mean of the clusters
def calculate_mean(clusters, data):
    means = []
    for cluster in clusters:
        if len(cluster) > 0:
            means.append(np.mean(data[cluster], axis=0))
        else:
            means.append(np.array([0, 0]))  # Prevents empty clusters from causing issues
    return means

# K-Means algorithm
def k_means(data, k, initial_centroids=None):
    # Convert data to a 2D array if it's not already
    if data.ndim == 1:
        data = data[:, np.newaxis]
   
    # Step 1: Print elements of the data set
    print("1. Elements of data set:")
    print(data.tolist())
   
    # Step 2: Cluster size k
    print(f"\n2. Cluster size k={k}")
   
    # If initial centroids are provided, use them; otherwise, choose randomly
    if initial_centroids is not None:
        centroids = initial_centroids
    else:
        # Randomly select initial cluster centroids
        centroids = data[random.sample(range(len(data)), k)]
       
    clusters = [[] for _ in range(k)]
    iteration = 0
   
    while True:
        print(f"\nIteration {iteration + 1}:")
       
        # Step 3: Assign each point to the nearest centroid
        new_clusters = [[] for _ in range(k)]
        for i, point in enumerate(data):
            distances = [euclidean_distance(point, centroid) for centroid in centroids]
            closest_centroid = np.argmin(distances)
            new_clusters[closest_centroid].append(i)

        # Step 4: Calculate the new centroids
        new_centroids = calculate_mean(new_clusters, data)
       
        # Convert clusters to Python lists for printing
        new_clusters_list = [list(np.array(cluster)) for cluster in new_clusters]
        new_centroids_list = [mean.tolist() for mean in new_centroids]  # Modified for 2D data
       
        # Print initial clusters
        if iteration == 0:
            print("\n3. Initial clusters:")
            for i, cluster in enumerate(new_clusters_list):
                print(f"Cluster {i + 1}: {data[cluster].tolist()}")
            print("\nMean of initial clusters:")
            print(new_centroids_list)
        else:
            print("\n4. Other clusters:")
            for i, cluster in enumerate(new_clusters_list):
                print(f"Cluster {i + 1}: {data[cluster].tolist()}")
            print("\nMean of clusters:")
            print(new_centroids_list)
       
        # Step 5: Check for convergence (if centroids don't change)
        if np.allclose(centroids, new_centroids):
            print("\n5. Clusters have stabilized. Final clusters and means:")
            for i, cluster in enumerate(new_clusters_list):
                print(f"Final Cluster {i + 1}: {data[cluster].tolist()}")
            print("Final Mean of clusters:")
            print(new_centroids_list)
            break
       
        centroids = new_centroids
        clusters = new_clusters
        iteration += 1

# Taking user input for the dataset and number of clusters
data_input = input("Enter the dataset (x,y pairs separated by spaces): ")
data = np.array([list(map(float, x.split(','))) for x in data_input.split()])
k = int(input("Enter the number of clusters: "))

# Optional: Initial Centroids
# Uncomment and set this variable if you want to provide initial centroids manually
initial_centroids = np.array([[1.0, 1.0], [5.0, 7.0]])

# Run K-Means algorithm with or without initial centroids
k_means(data, k, initial_centroids)  # Replace `None` with `initial_centroids` if desired











OUTPUT: 

Enter the dataset (x,y pairs separated by spaces): 1,1 2,1 4,3 5,4
Enter the number of clusters: 2
1. Elements of data set:
[[1.0, 1.0], [2.0, 1.0], [4.0, 3.0], [5.0, 4.0]]

2. Cluster size k=2

Iteration 1:

3. Initial clusters:
Cluster 1: [[1.0, 1.0], [2.0, 1.0], [4.0, 3.0]]
Cluster 2: [[5.0, 4.0]]

Mean of initial clusters:
[[2.3333333333333335, 1.6666666666666667], [5.0, 4.0]]

Iteration 2:

4. Other clusters:
Cluster 1: [[1.0, 1.0], [2.0, 1.0]]
Cluster 2: [[4.0, 3.0], [5.0, 4.0]]

Mean of clusters:
[[1.5, 1.0], [4.5, 3.5]]

Iteration 3:

4. Other clusters:
Cluster 1: [[1.0, 1.0], [2.0, 1.0]]
Cluster 2: [[4.0, 3.0], [5.0, 4.0]]

Mean of clusters:
[[1.5, 1.0], [4.5, 3.5]]

5. Clusters have stabilized. Final clusters and means:
Final Cluster 1: [[1.0, 1.0], [2.0, 1.0]]
Final Cluster 2: [[4.0, 3.0], [5.0, 4.0]]
Final Mean of clusters:
[[1.5, 1.0], [4.5, 3.5]]

=== Code Execution Successful ===
